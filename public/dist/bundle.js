var tsAttackTimer;(()=>{"use strict";var e={698:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(){}static getMsFromString(e){const t=e.match(/\d+/g);return 60*Number(t[0])*60*1e3+60*Number(t[1])*1e3+1e3*Number(t[2])}static getMsFormated(e){var t=e/60/60/1e3,n=(e-3600*Math.floor(t)*1e3)/60/1e3,a=(e-3600*Math.floor(t)*1e3-60*Math.floor(n)*1e3)/1e3;return`(${Math.floor(t)}:${Math.floor(n)}:${Math.floor(a)})`}static updateTimeDOM(e,t,a,i){const r=n.now().getTime(),o=e.getTime()-r,s=setInterval((function(){const l=new Date,c=/\(.*\)/;t.value=a.replace(c,"")+" "+n.getMsFormated(o-(l.getTime()-r)),o-(l.getTime()-r)<=0&&(console.log("Executed [date]:"+n.toString()),console.log("Action [ms]: "+e.getTime()),console.log("Action executed [date]: "+l.toDateString()+" ms: "+l.getMilliseconds()),t.value=a.replace(c,""),clearInterval(s),i&&i.click())}),1e3);return s}static generateDateFromString(e){const t=e.match(/\d+/g),n=Number(t[0]),a=Number(t[1])-1,i=Number(t[2]),r=Number(t[3]),o=Number(t[4]),s=Number(t[5]),l=Number(t[6])?Number(t[6]):0;return new Date(new Date(i,a,n,r,o,s).setMilliseconds(l))}}t.default=n,n.now=()=>new Date(new Date(Date.now()).setMilliseconds(0)),n.correctTimeOffset=e=>{const t=60*n.now().getTimezoneOffset()*1e3;return new Date(e.getTime()-t)},n.toString=()=>{const e=n.now().toLocaleString().match(/^.*\s/g),t=n.now().toLocaleString().match(/\s.*$/g),[a,i,r]=e[0].trim().split("."),[o,s,l]=t[0].trim().split(":");return`${a}.${i}.${r} ${o}:${s}:${l}`}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={exports:{}};return e[a](r,r.exports,n),r.exports}var a={};(()=>{var e=a;const t=n(698);e.default=class{constructor(){this.execution=()=>{this.timedId&&clearInterval(this.timedId);const e=this._container.getElementsByTagName("tbody")[0].getElementsByTagName("tr")[2].innerHTML,n=this._container.getElementsByClassName("timedAction")[0].value,a=this._container.getElementsByClassName("troop_confirm_go")[0],i=new Date(t.default.generateDateFromString(n).getTime()-t.default.getMsFromString(e)),r=this._container.getElementsByClassName("troop_confirm_go")[0];if(t.default.now().getTime()>t.default.generateDateFromString(n).getTime()-t.default.getMsFromString(e))return alert("Time for attack is already passed!"),void(this.timedId&&clearInterval(this.timedId));this.timedId=t.default.updateTimeDOM(i,a,a.value,r)};const e=document.getElementById("popup_box_popup_command");!e||e.classList.contains("initialized")?e.classList.contains("initialized")?alert("already initialized!"):alert("Please run on attacking/supporting popup"):(console.log("tsAttackTimer initialized"),e.classList.add("initialized"),this._container=e)}static init(e){const n=e._container,a=n.getElementsByTagName("tbody")[0],i=a.getElementsByTagName("tr");if(!n||!a||!i)return;if(console.log(`===== Start Initialization: ${t.default.now} =====`),n.getElementsByTagName("button").length>0)return console.error("tsAttackTimer already running, please refresh and rerun script!");const r=document.createElement("tr"),o=new Date(t.default.now().getTime()+36e5);r.innerHTML=`\n     <td>Timed:</td>\n     <td id="date_arrival">\n      <input type="text" class="timedAction" value="${o.getDate()}.${o.getMonth()+1}.${o.getFullYear()} ${o.getUTCHours()}:${o.getMinutes()}:${o.getSeconds()}:${o.getMilliseconds()}" />\n      <button type="button" class="btn setTimedAction">Set Timing</button>\n     </td>\n     <script>\n     $("#command-data-form").submit(function(event){ \n      event.preventDefault(); \n     }); \n     <\/script>\n    `,a.appendChild(r),a.getElementsByClassName("setTimedAction")[0].onclick=function(t){t.preventDefault(),e.execution()}}}})(),tsAttackTimer=a.default})();